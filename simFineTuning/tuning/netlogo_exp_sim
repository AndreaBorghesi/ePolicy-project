#!/usr/bin/python

import sys
import getopt
from lxml import etree as ET
import subprocess
import csv

def setup_exp():
	my_log.write("Inside setup_exp()\n")
	my_log.write("Number of arguments: {}".format(len(sys.argv)))
	my_log.write('\nArgument List: {}'.format(str(sys.argv)) )
	tree = ET.parse("../netlogo_experiments/netlogo_experiment_setup.xml")
	root = tree.getroot()
	my_log.write("\nxml setup opened\n")
	
	# parameters MUST be passed only as long flags (--opt arg)
	try:
		opts, args = getopt.getopt(sys.argv[1:], "c:i:", [
									# agent '0' parameters
									"M2_Disposizione=", "Consumo_medio_annuale_KWh=", "Budget_Medio_MiliaiaEuro=", 
									"Media%_copertura_consumi_richiesta=", "Aumento_%annuo_consumi=",
									# PV tech and general sim.
									"Riduzione_anno_%costo_pannello=",
									"Perdita_efficienza_annuale_pannello=", "Tecnologia_Pannello=", 
									"Manutenzione_anno_%costo_totale=", "variazione_annuale_prezzi_elettricita=",
									"Anni_Restituzione_Prestiti=", "Percentuale_Interessi_Prestito=",
									# regional incentives parameters
									"Tipo_inc_reg=", "BudgetRegione=", "BudgetRegione2008=", "BudgetRegione2009=",
									"BudgetRegione2010=", "BudgetRegione2011=", "BudgetRegione2012=","BudgetRegione2013=",
									"Probfinanz=", "InterBanca=", "Accettato=", "InterRegione=",
									"Anni_Restituzione_mutuo_regione=", "Anni_Restituzione_mutuo_banca=",
									"FallimentoMutuo=", "PercMin=", "PercMax=", "InfluenzaRate=",
									# social interaction
									"Sensibilita=", "Raggio=", 
									# ROE
									"ROE_minimo_desiderato=",
									# knowledge diffusion
									"Tipo_variazione_conoscenza_PV=", "Diffusione_Conoscenza_Iniziale=", 
									"Coeff_Variazione_Diffusione="
									# simulation parameters that could be considered later
									# "NumeroAgenti=", "%_Incentivi_Installazione=", "Tasso_lordo_rendimento_BOT=",
									# "Incentivi_Dinamici=", "Incentivi_Installazione=",
									# "Irradiazione_media_annua_kwh_kwp=", "Costo_Medio_kwP=",
									])
		my_log.write("Args parsed correctly\n")
	except getopt.GetoptError, e:
		my_log.write("Args parsing failed\n")
		my_log.write("Error: {}\n".format(str(e.msg)))
		sys.exit(2)

	for opt, arg in opts:
		if opt == "-c":
			nrun=arg
		else:
			for experiment in root.iter("experiment"):
	#			my_log.write("\nI>>>> {}".format(str(opt[2:])))
				for enumeratedValueSet in experiment.xpath("./enumeratedValueSet[@variable='{}']".format(str(opt[2:]))):
	#				my_log.write("\nE>>>> {}".format(str(opt[2:])))
					for parameter in enumeratedValueSet:
						#print parameter.tag, parameter.attrib
	#					my_log.write("\nM>>>> {}".format(str(opt[2:])))
	#					my_log.write("\tOld val:{}".format(str(parameter.attrib)))
	#					my_log.write("\tNew val:{}".format(str(arg)))

						# netlogo requires to write string (if parameter is one of the following) in xml file like this &quot;string&quot;
						if (opt[2:] == "Tecnologia_Pannello") or (opt[2:] == "Tipo_inc_reg") or (opt[2:] == "Tipo_variazione_conoscenza_PV"):
							parameter.attrib['value']="\"{}\"".format(arg)
						else:
							parameter.attrib['value']=arg
			
	exp_setup_xml_file_name = "/media/sda4/ePolicy/simFineTuning/netlogo_experiments/netlogo_experiment_setup_{}.xml".format(str(nrun))
#	with open("../netlogo_experiments/netlogo_experiment_setup_{}.xml".format(str(nrun)), 'w+') as f:
	with open(exp_setup_xml_file_name,'w+') as f:
		f.write(ET.tostring(tree, encoding="UTF-8",
		                 xml_declaration=True,
		                 pretty_print=True,
		                 doctype='<!DOCTYPE experiments SYSTEM "behaviorspace.dtd">'))
	# return the name of the file with right setup for the netlogo experiment
	return exp_setup_xml_file_name
	
	
# MUST BE MODIFIED ----> the sim result (csv file) has to be scaled: if not, the bigger values of yearly kW would be preferred since they are closer to the much higher values taken from real data, thus masking the comparison between the real and the simulated trend 
def eval_results():
	filename = "/media/sda4/ePolicy/simulationModel/output/kW_CE.csv"
	# regional yearly PV kW produced - for plant of class 1 and 2
	kW_base = [3230, 11115, 16267, 39467, 85438, 69839]  # real data
	# interpolate some values in order to obtain more data
	kW = [0,0,0,0,0,0,0,0,0,0,0]  # interpolated values
	sum_res = 0
	sum_kw = [0,0,0,0,0,0]  
	avg_kw_base = [0,0,0,0,0,0]  # average values of simulated kw
	avg_kw = [0,0,0,0,0,0,0,0,0,0,0] # interpolated vaues for simulation results
	i = 0 
	scale_factor = 10 # tentative value --------> TODO
	with open(filename, 'rb') as csvfile:
		reader = csv.reader(csvfile)
		row_count = 0
		# read simulated kw values from csv from files - one row for each simulation
		for row in reader:
			col_count = 0
			for col in row: 
				if col_count<6: # since in the csv file the last column is for 2013 values
					sum_kw[col_count]+=float(col)
					# sum_res += ((kW[col_count]-float(col)) ** 2)
				col_count+=1
			row_count+=1
			
		# compute average simulated kw values
		for avg_val in avg_kw_base:
			avg_kw_base[i]=int(sum_kw[i]/row_count)
			i+=1
		
		#interpolate kw values - real data and simulation results -----> change the
		# simulator to directly obtain semester values
		i=0
		for val in kW_base:
			kW[i*2]=kW_base[i]
			avg_kw[i*2]=avg_kw_base[i]
			if (i<5):
				kW[i*2+1]=kW_base[i]+(kW_base[i+1]-kW_base[i])/2
				avg_kw[i*2+1]=avg_kw_base[i]+(avg_kw_base[i+1]-avg_kw_base[i])/2
			i+=1
			
		# we compute the least square sum not using the absolute values (this could lead to errors)
		# but with the yearly percetage increase/decrease compared to a base value (kW of first semester 2007)
		var_sim_kw_per=[100,0,0,0,0,0,0,0,0,0,0]
		var_kw_per=[100,0,0,0,0,0,0,0,0,0,0]
		i=1
		for val in kW[1:]:
			var_sim_kw_per[i]=avg_kw[i]*100/avg_kw[0]
			var_kw_per[i]=kW[i]*100/kW[0]
			i+=1
				
		# compute sum of square residuals
		i=0
		for val in kW:
			sum_res += ((var_kw_per[i]-var_sim_kw_per[i]) ** 2)		
			i+=1	
				
	# delete kW file content
	f = open(filename, "w+")
	f.close()
	# return metric
	print sum_res


if __name__ == '__main__':
	log_file = "/media/sda4/ePolicy/simFineTuning/tuning/my_log"
	netlogo_headless = "/media/sda4/netlogo-5.0.2/netlogo-headless.sh"
	netlogo_model = "/media/sda4/ePolicy/simulationModel/SimModel_extCE.nlogo"
	with open(log_file, 'a') as my_log:
		exp_setup_xml_file_name=setup_exp()
#		# repeated iteration of netlogo simulation required in order to obtain significative results
		subprocess.call([netlogo_headless,"--model",netlogo_model,"--setup-file",exp_setup_xml_file_name,"--experiment","simple_run"])
		eval_results()
