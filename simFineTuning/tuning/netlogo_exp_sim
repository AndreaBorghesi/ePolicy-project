#!/usr/bin/python

import sys
import getopt
from lxml import etree as ET
import subprocess
import csv

def setup_exp():
	my_log.write("Inside setup_exp()\n")
	my_log.write("Number of arguments: {}".format(len(sys.argv)))
	my_log.write('\nArgument List: {}'.format(str(sys.argv)) )
	tree = ET.parse("../netlogo_experiment_setup.xml")
	root = tree.getroot()
	my_log.write("\nxml setup opened\n")
	
	# parameters MUST be passed only as long flags (--opt arg)
	try:
		opts, args = getopt.getopt(sys.argv[1:], "i:", [
									# agent '0' parameters
									"M2_Disposizione=", "Consumo_medio_annuale_KWh=", "Budget_Medio_MiliaiaEuro=", 
									"Media%_copertura_consumi_richiesta=", "Aumento_%annuo_consumi=",
									# PV tech and general sim.
									"Riduzione_anno_%costo_pannello=",
									"Perdita_efficienza_annuale_pannello=", "Tecnologia_Pannello=", 
									"Manutenzione_anno_%costo_totale=", "variazione_annuale_prezzi_elettricita=",
									"Anni_Restituzione_Prestiti=", "Percentuale_Interessi_Prestito=",
									# regional incentives parameters
									"Tipo_inc_reg=", "BudgetRegione=", "BudgetRegione2008=", "BudgetRegione2009=",
									"BudgetRegione2010=", "BudgetRegione2011=", "BudgetRegione2012=","BudgetRegione2013=",
									"Probfinanz=", "InterBanca=", "Accettato=", "InterRegione=",
									"Anni_Restituzione_mutuo_regione=", "Anni_Restituzione_mutuo_banca=",
									"FallimentoMutuo=", "PercMin=", "PercMax=", "InfluenzaRate=",
									# social interaction
									"Sensibilita=", "Raggio=", 
									# ROE
									"ROE_minimo_desiderato=",
									# knowledge diffusion
									"Tipo_variazione_conoscenza_PV=", "Diffusione_Conoscenza_Iniziale=", 
									"Coeff_Variazione_Diffusione="
									# simulation parameters that could be considered later
									# "NumeroAgenti=", "%_Incentivi_Installazione=", "Tasso_lordo_rendimento_BOT=",
									# "Incentivi_Dinamici=", "Incentivi_Installazione=",
									# "Irradiazione_media_annua_kwh_kwp=", "Costo_Medio_kwP=",
									])
		my_log.write("Args parsed correctly\n")
	except getopt.GetoptError:
		my_log.write("Args parsing failed\n")
		sys.exit(2)

	# get instance number
#	for opt, arg in opts[0]:
#		instance = str(arg[]) 
	
	
#	for experiment in root.iter("experiment"):
#		for enumeratedValueSet in experiment.findall("./enumeratedValueSet"):
#			for opt, arg in opts:
#				my_log.write("\nI>>>> {}".format(str(opt[2:])))
#				if enumeratedValueSet.attrib['variable']==str(opt[2:]):  # cut -- from opt 
#					for parameter in enumeratedValueSet:
#						#print parameter.tag, parameter.attrib
#						my_log.write("\nM>>>> {}".format(str(opt[2:])))
#						my_log.write("\tOld val:{}".format(str(parameter.attrib)))
#						my_log.write("\tNew val:{}".format(str(arg)))
#						parameter.attrib['value']=arg

	for opt, arg in opts:
		for experiment in root.iter("experiment"):
			my_log.write("\nI>>>> {}".format(str(opt[2:])))
			for enumeratedValueSet in experiment.xpath("./enumeratedValueSet[@variable='{}']".format(str(opt[2:]))):
				my_log.write("\nE>>>> {}".format(str(opt[2:])))
				for parameter in enumeratedValueSet:
					#print parameter.tag, parameter.attrib
					my_log.write("\nM>>>> {}".format(str(opt[2:])))
					my_log.write("\tOld val:{}".format(str(parameter.attrib)))
					my_log.write("\tNew val:{}".format(str(arg)))
					parameter.attrib['value']=arg
			
	with open("../netlogo_experiment_setup.xml", 'w') as f:
		f.write(ET.tostring(tree, encoding="UTF-8",
		                 xml_declaration=True,
		                 pretty_print=True,
		                 doctype='<!DOCTYPE experiments SYSTEM "behaviorspace.dtd">'))
	
# MUST BE MODIFIED ----> the sim result (csv file) has to be scaled: if not, the bigger values of yearly kW would be preferred since they are closer to the much higher values taken from real data, thus masking the comparison between the real and the simulated trend 
def eval_results():
	# least square fitting
	# regional yearly PV kW produced - for plant of class 1 and 2
	kW = [3230, 11115, 16267, 39467, 85438, 69839]
	with open("/media/sda4/ePolicy/simulationModel/output/kW_CE.csv", 'rb') as csvfile:
		reader = csv.reader(csvfile)
		for row in reader:
			i = 0
			sum_res = 0
			for col in row: 
				if i<6: # since in the csv file the last column is for 2013 values
					# square residuals
					sum_res += ((kW[i]-float(col)) ** 2)
				i+=1
		print sum_res


if __name__ == '__main__':
	with open("/media/sda4/ePolicy/simFineTuning/tuning/my_log", 'a') as my_log:
		my_log.write("\n --------- netlogo_exp_sim starts -----------\n") 
		setup_exp()
#		my_log.write("\n ----------- setup_exp() completed ------------ \n")
#		subprocess.call(["/media/sda4/netlogo-5.0.2/netlogo-headless.sh","--model","/media/sda4/ePolicy/simulationModel/SimModel_extCE.nlogo","--setup-file","/media/sda4/ePolicy/simFineTuning/netlogo_experiment_setup.xml","--experiment","simple_run"])
#		my_log.write("-----------  netlogo called -------------\n")
#		eval_results()
#		my_log.write("-----------  eval_results() completed --------\n")
